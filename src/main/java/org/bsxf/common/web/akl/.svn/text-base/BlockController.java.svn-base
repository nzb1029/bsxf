package org.bsxf.common.web.akl;

import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;
import javax.validation.Valid;

import org.bsxf.common.entity.akl.Block;
import org.bsxf.common.entity.akl.BlockParam;
import org.bsxf.common.entity.sys.Area;
import org.bsxf.common.service.SystemManager;
import org.bsxf.common.service.akl.BlockManager;
import org.bsxf.common.service.akl.BlockParamManager;
import org.bsxf.utils.JqGirds;
import org.bsxf.utils.Page;
import org.bsxf.web.LtSecurityUtils;
import org.apache.commons.lang3.StringUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.servlet.mvc.support.RedirectAttributes;
import org.springside.utils.Collections3;
import org.springside.utils.Identities;

@Controller
@RequestMapping(value = "/block")
public class BlockController {
	
	@Autowired
	private BlockManager blockManager ;
	
	@Autowired
	private SystemManager sysManager;
	@Autowired
	private BlockParamManager blockParamManager ;
	
	@RequestMapping(value = { "list" })
	public String list(Model model) {
		return "akl/blockList";
	}

	@RequestMapping(value = { "jqgrid" })
	@ResponseBody
	public Map jqgrid(HttpServletRequest request) {
		Page page = JqGirds.parmsToPage(request);
		if (StringUtils.isBlank(page.getOrder())) {
			page.setOrder("s.create_time", "desc");
		}
		page = blockManager.findBlockByPage(page);
		return JqGirds.renderJson(page);
	}
	
	@RequestMapping(value = { "create/{id}" })
	public String create(@PathVariable("id")String id, Model model) {
	    Block block = new Block();
		if (StringUtils.isNotBlank(id)&& !"undefined".equals(id)) {
			block = blockManager.getBlock(id);
		}else{
			id = Identities.uuid2();
			block.setId(id);
		}
		List<Area> plist=sysManager.getAllProvince();
		
		model.addAttribute("plist", plist);
		model.addAttribute("block", block);
		
		return "akl/blockForm";
	}
	
	@RequestMapping(value = { "save" }, method = RequestMethod.POST)
	public String save(@Valid @ModelAttribute("block") Block block, RedirectAttributes redirectAttributes, HttpServletRequest request) {
		
		blockManager.saveOrUpdate(block);
		redirectAttributes.addFlashAttribute("message", "创建成功");
		return "redirect:/block/list";
	}
	
	@SuppressWarnings("unchecked")
	@RequestMapping(value = "loadCity/{id}")
	@ResponseBody
	public List<Area> loadCity(@PathVariable("id") String pid) {
		List<Area> clist= sysManager.getAreaByParentId(pid);
		return clist;
	}
	
	@SuppressWarnings("unchecked")
	@RequestMapping(value = "delete/{id}")
	@ResponseBody
	public String delete(@PathVariable("id") String id) {
		
		blockManager.disabledBlock(Collections3.extractToList(id.split(",")));
		
		return "true" ;
	}
	
	@RequestMapping(value = { "ygsj" })
	public String ygsj(Model model) {
	    Block block = blockManager.getBlock(LtSecurityUtils.getShiroUser().getBlockId());
		
		model.addAttribute("block", block);
		model.addAttribute("provice", block.getProvice().getName());
		model.addAttribute("city", block.getCity().getName());
		return "akl/blockYgsj";
	}
	
	@RequestMapping(value = { "zzfa" })
	public String zzfa(Model model) {
		String blockId = LtSecurityUtils.getShiroUser().getBlockId();
	    Block block = blockManager.getBlock(blockId);
		BlockParam blockParam = blockParamManager.getBlockParamByBlockId(blockId);
		model.addAttribute("block", block);
		model.addAttribute("blockParam", blockParam);
		return "akl/blockZzfa";
	}
}
